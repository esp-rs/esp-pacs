# [doc = "Register `IN_DSCR_CH%s` reader"] pub type R = crate :: R < IN_DSCR_CH_SPEC > ; # [doc = "Field `INLINK_DSCR_CH` reader - Represents the address of the next receive descriptor x+1 pointed by the current receive descriptor that has already been fetched."] pub type INLINK_DSCR_CH_R = crate :: FieldReader < u32 > ; impl R { # [doc = "Bits 0:31 - Represents the address of the next receive descriptor x+1 pointed by the current receive descriptor that has already been fetched."] # [inline (always)] pub fn inlink_dscr_ch (& self) -> INLINK_DSCR_CH_R { INLINK_DSCR_CH_R :: new (self . bits) } } # [cfg (feature = "impl-register-debug")] impl core :: fmt :: Debug for R { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("IN_DSCR_CH") . field ("inlink_dscr_ch" , & self . inlink_dscr_ch ()) . finish () } } # [doc = "Current receive descriptor address of RX channel %s\n\nYou can [`read`](crate::Reg::read) this register and get [`in_dscr_ch::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IN_DSCR_CH_SPEC ; impl crate :: RegisterSpec for IN_DSCR_CH_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`in_dscr_ch::R`](R) reader structure"] impl crate :: Readable for IN_DSCR_CH_SPEC { } # [doc = "`reset()` method sets IN_DSCR_CH%s to value 0"] impl crate :: Resettable for IN_DSCR_CH_SPEC { const RESET_VALUE : u32 = 0 ; }