# [repr (C)] # [cfg_attr (feature = "impl-register-debug" , derive (Debug))] # [doc = "Register block"] pub struct RegisterBlock { strap : STRAP , out : OUT , out_w1ts : OUT_W1TS , out_w1tc : OUT_W1TC , out1 : OUT1 , out1_w1ts : OUT1_W1TS , out1_w1tc : OUT1_W1TC , _reserved7 : [u8 ; 0x18] , enable : ENABLE , enable_w1ts : ENABLE_W1TS , enable_w1tc : ENABLE_W1TC , enable1 : ENABLE1 , enable1_w1ts : ENABLE1_W1TS , enable1_w1tc : ENABLE1_W1TC , _reserved13 : [u8 ; 0x18] , in_ : IN , in1 : IN1 , _reserved15 : [u8 ; 0x08] , status : STATUS , status_w1ts : STATUS_W1TS , status_w1tc : STATUS_W1TC , status1 : STATUS1 , status1_w1ts : STATUS1_W1TS , status1_w1tc : STATUS1_W1TC , _reserved21 : [u8 ; 0x18] , procpu_int : PROCPU_INT , procpu_int1 : PROCPU_INT1 , _reserved23 : [u8 ; 0x08] , status_next : STATUS_NEXT , status_next1 : STATUS_NEXT1 , _reserved25 : [u8 ; 0x08] , pin : [PIN ; 29] , pin29 : PIN29 , pin30 : PIN30 , pin31 : PIN31 , pin32 : PIN32 , _reserved30 : [u8 ; 0x017c] , func0_in_sel_cfg : FUNC0_IN_SEL_CFG , _reserved31 : [u8 ; 0x14] , func_in_sel_cfg : [FUNC_IN_SEL_CFG ; 12] , _reserved32 : [u8 ; 0x24] , func0_in_sel_cfg : [FUNC_IN_SEL_CFG ; 9] , _reserved33 : [u8 ; 0x14] , func0_in_sel_cfg : [FUNC_IN_SEL_CFG ; 3] , _reserved34 : [u8 ; 0x08] , func_in_sel_cfg : [FUNC_IN_SEL_CFG ; 21] , _reserved35 : [u8 ; 0x0c] , func70_in_sel_cfg : FUNC70_IN_SEL_CFG , _reserved36 : [u8 ; 0x0c] , func0_in_sel_cfg : [FUNC_IN_SEL_CFG ; 19] , _reserved37 : [u8 ; 0x10] , func0_in_sel_cfg : [FUNC_IN_SEL_CFG ; 20] , _reserved38 : [u8 ; 0x062c] , func_out_sel_cfg : [FUNC_OUT_SEL_CFG ; 29] , func29_out_sel_cfg : FUNC29_OUT_SEL_CFG , func30_out_sel_cfg : FUNC30_OUT_SEL_CFG , func31_out_sel_cfg : FUNC31_OUT_SEL_CFG , func32_out_sel_cfg : FUNC32_OUT_SEL_CFG , _reserved43 : [u8 ; 0x02b0] , clock_gate : CLOCK_GATE , date : DATE , } impl RegisterBlock { # [doc = "0x00 - Strapping pin register"] # [inline (always)] pub const fn strap (& self) -> & STRAP { & self . strap } # [doc = "0x04 - GPIO output register"] # [inline (always)] pub const fn out (& self) -> & OUT { & self . out } # [doc = "0x08 - GPIO output set register"] # [inline (always)] pub const fn out_w1ts (& self) -> & OUT_W1TS { & self . out_w1ts } # [doc = "0x0c - GPIO output clear register"] # [inline (always)] pub const fn out_w1tc (& self) -> & OUT_W1TC { & self . out_w1tc } # [doc = "0x10 - GPIO output register for GPIO32-32"] # [inline (always)] pub const fn out1 (& self) -> & OUT1 { & self . out1 } # [doc = "0x14 - GPIO output set register for GPIO32-32"] # [inline (always)] pub const fn out1_w1ts (& self) -> & OUT1_W1TS { & self . out1_w1ts } # [doc = "0x18 - GPIO output clear register for GPIO32-32"] # [inline (always)] pub const fn out1_w1tc (& self) -> & OUT1_W1TC { & self . out1_w1tc } # [doc = "0x34 - GPIO output enable register"] # [inline (always)] pub const fn enable (& self) -> & ENABLE { & self . enable } # [doc = "0x38 - GPIO output enable set register"] # [inline (always)] pub const fn enable_w1ts (& self) -> & ENABLE_W1TS { & self . enable_w1ts } # [doc = "0x3c - GPIO output enable clear register"] # [inline (always)] pub const fn enable_w1tc (& self) -> & ENABLE_W1TC { & self . enable_w1tc } # [doc = "0x40 - GPIO output enable register for GPIO32-32"] # [inline (always)] pub const fn enable1 (& self) -> & ENABLE1 { & self . enable1 } # [doc = "0x44 - GPIO output enable set register for GPIO32-32"] # [inline (always)] pub const fn enable1_w1ts (& self) -> & ENABLE1_W1TS { & self . enable1_w1ts } # [doc = "0x48 - GPIO output enable clear register for GPIO32-32"] # [inline (always)] pub const fn enable1_w1tc (& self) -> & ENABLE1_W1TC { & self . enable1_w1tc } # [doc = "0x64 - GPIO input register"] # [inline (always)] pub const fn in_ (& self) -> & IN { & self . in_ } # [doc = "0x68 - GPIO input register for GPIO32-32"] # [inline (always)] pub const fn in1 (& self) -> & IN1 { & self . in1 } # [doc = "0x74 - GPIO interrupt status register"] # [inline (always)] pub const fn status (& self) -> & STATUS { & self . status } # [doc = "0x78 - GPIO interrupt status set register"] # [inline (always)] pub const fn status_w1ts (& self) -> & STATUS_W1TS { & self . status_w1ts } # [doc = "0x7c - GPIO interrupt status clear register"] # [inline (always)] pub const fn status_w1tc (& self) -> & STATUS_W1TC { & self . status_w1tc } # [doc = "0x80 - GPIO interrupt status register for GPIO32-32"] # [inline (always)] pub const fn status1 (& self) -> & STATUS1 { & self . status1 } # [doc = "0x84 - GPIO interrupt status set register for GPIO32-32"] # [inline (always)] pub const fn status1_w1ts (& self) -> & STATUS1_W1TS { & self . status1_w1ts } # [doc = "0x88 - GPIO interrupt status clear register for GPIO32-32"] # [inline (always)] pub const fn status1_w1tc (& self) -> & STATUS1_W1TC { & self . status1_w1tc } # [doc = "0xa4 - GPIO_PROCPU_INT interrupt status register for GPIO0-31"] # [inline (always)] pub const fn procpu_int (& self) -> & PROCPU_INT { & self . procpu_int } # [doc = "0xa8 - GPIO_PROCPU_INT interrupt status register for GPIO32-32"] # [inline (always)] pub const fn procpu_int1 (& self) -> & PROCPU_INT1 { & self . procpu_int1 } # [doc = "0xb4 - GPIO interrupt source register"] # [inline (always)] pub const fn status_next (& self) -> & STATUS_NEXT { & self . status_next } # [doc = "0xb8 - GPIO interrupt source register for GPIO32-32"] # [inline (always)] pub const fn status_next1 (& self) -> & STATUS_NEXT1 { & self . status_next1 } # [doc = "0xc4..0x138 - GPIO$N configuration register"] # [inline (always)] pub const fn pin (& self , n : usize) -> & PIN { & self . pin [n] } # [doc = "Iterator for array of:"] # [doc = "0xc4..0x138 - GPIO$N configuration register"] # [inline (always)] pub fn pin_iter (& self) -> impl Iterator < Item = & PIN > { self . pin . iter () } # [doc = "0x138 - GPIO29 configuration register"] # [inline (always)] pub const fn pin29 (& self) -> & PIN29 { & self . pin29 } # [doc = "0x13c - GPIO30 configuration register"] # [inline (always)] pub const fn pin30 (& self) -> & PIN30 { & self . pin30 } # [doc = "0x140 - GPIO31 configuration register"] # [inline (always)] pub const fn pin31 (& self) -> & PIN31 { & self . pin31 } # [doc = "0x144 - GPIO32 configuration register"] # [inline (always)] pub const fn pin32 (& self) -> & PIN32 { & self . pin32 } # [doc = "0x2c4 - Configuration register for input signal 0"] # [inline (always)] pub const fn func0_in_sel_cfg (& self) -> & FUNC0_IN_SEL_CFG { & self . func0_in_sel_cfg } # [doc = "0x2dc..0x30c - Configuration register for input signal %s"] # [inline (always)] pub const fn func_in_sel_cfg (& self , n : usize) -> & FUNC_IN_SEL_CFG { & self . func_in_sel_cfg [n] } # [doc = "Iterator for array of:"] # [doc = "0x2dc..0x30c - Configuration register for input signal %s"] # [inline (always)] pub fn func_in_sel_cfg_iter (& self) -> impl Iterator < Item = & FUNC_IN_SEL_CFG > { self . func_in_sel_cfg . iter () } # [doc = "0x2dc - Configuration register for input signal 0"] # [inline (always)] pub const fn func0_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (0) } # [doc = "0x2e0 - Configuration register for input signal 1"] # [inline (always)] pub const fn func1_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (1) } # [doc = "0x2e4 - Configuration register for input signal 2"] # [inline (always)] pub const fn func2_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (2) } # [doc = "0x2e8 - Configuration register for input signal 3"] # [inline (always)] pub const fn func3_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (3) } # [doc = "0x2ec - Configuration register for input signal 4"] # [inline (always)] pub const fn func4_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (4) } # [doc = "0x2f0 - Configuration register for input signal 5"] # [inline (always)] pub const fn func5_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (5) } # [doc = "0x2f4 - Configuration register for input signal 6"] # [inline (always)] pub const fn func6_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (6) } # [doc = "0x2f8 - Configuration register for input signal 7"] # [inline (always)] pub const fn func7_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (7) } # [doc = "0x2fc - Configuration register for input signal 8"] # [inline (always)] pub const fn func8_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (8) } # [doc = "0x300 - Configuration register for input signal 9"] # [inline (always)] pub const fn func9_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (9) } # [doc = "0x304 - Configuration register for input signal 10"] # [inline (always)] pub const fn func10_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (10) } # [doc = "0x308 - Configuration register for input signal 11"] # [inline (always)] pub const fn func11_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (11) } # [doc = "0x330..0x354 - Configuration register for input signal %s"] # [inline (always)] pub const fn func0_in_sel_cfg (& self , n : usize) -> & FUNC_IN_SEL_CFG { & self . func0_in_sel_cfg [n] } # [doc = "Iterator for array of:"] # [doc = "0x330..0x354 - Configuration register for input signal %s"] # [inline (always)] pub fn func0_in_sel_cfg_iter (& self) -> impl Iterator < Item = & FUNC_IN_SEL_CFG > { self . func0_in_sel_cfg . iter () } # [doc = "0x330 - Configuration register for input signal 0"] # [inline (always)] pub const fn func0_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (0) } # [doc = "0x334 - Configuration register for input signal 1"] # [inline (always)] pub const fn func1_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (1) } # [doc = "0x338 - Configuration register for input signal 2"] # [inline (always)] pub const fn func2_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (2) } # [doc = "0x33c - Configuration register for input signal 3"] # [inline (always)] pub const fn func3_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (3) } # [doc = "0x340 - Configuration register for input signal 4"] # [inline (always)] pub const fn func4_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (4) } # [doc = "0x344 - Configuration register for input signal 5"] # [inline (always)] pub const fn func5_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (5) } # [doc = "0x348 - Configuration register for input signal 6"] # [inline (always)] pub const fn func6_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (6) } # [doc = "0x34c - Configuration register for input signal 7"] # [inline (always)] pub const fn func7_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (7) } # [doc = "0x350 - Configuration register for input signal 8"] # [inline (always)] pub const fn func8_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (8) } # [doc = "0x368..0x374 - Configuration register for input signal %s"] # [inline (always)] pub const fn func0_in_sel_cfg (& self , n : usize) -> & FUNC_IN_SEL_CFG { & self . func0_in_sel_cfg [n] } # [doc = "Iterator for array of:"] # [doc = "0x368..0x374 - Configuration register for input signal %s"] # [inline (always)] pub fn func0_in_sel_cfg_iter (& self) -> impl Iterator < Item = & FUNC_IN_SEL_CFG > { self . func0_in_sel_cfg . iter () } # [doc = "0x368 - Configuration register for input signal 0"] # [inline (always)] pub const fn func0_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (0) } # [doc = "0x36c - Configuration register for input signal 1"] # [inline (always)] pub const fn func1_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (1) } # [doc = "0x370 - Configuration register for input signal 2"] # [inline (always)] pub const fn func2_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (2) } # [doc = "0x37c..0x3d0 - Configuration register for input signal %s"] # [inline (always)] pub const fn func_in_sel_cfg (& self , n : usize) -> & FUNC_IN_SEL_CFG { & self . func_in_sel_cfg [n] } # [doc = "Iterator for array of:"] # [doc = "0x37c..0x3d0 - Configuration register for input signal %s"] # [inline (always)] pub fn func_in_sel_cfg_iter (& self) -> impl Iterator < Item = & FUNC_IN_SEL_CFG > { self . func_in_sel_cfg . iter () } # [doc = "0x37c - Configuration register for input signal 0"] # [inline (always)] pub const fn func0_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (0) } # [doc = "0x380 - Configuration register for input signal 1"] # [inline (always)] pub const fn func1_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (1) } # [doc = "0x384 - Configuration register for input signal 2"] # [inline (always)] pub const fn func2_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (2) } # [doc = "0x388 - Configuration register for input signal 3"] # [inline (always)] pub const fn func3_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (3) } # [doc = "0x38c - Configuration register for input signal 4"] # [inline (always)] pub const fn func4_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (4) } # [doc = "0x390 - Configuration register for input signal 5"] # [inline (always)] pub const fn func5_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (5) } # [doc = "0x394 - Configuration register for input signal 6"] # [inline (always)] pub const fn func6_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (6) } # [doc = "0x398 - Configuration register for input signal 7"] # [inline (always)] pub const fn func7_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (7) } # [doc = "0x39c - Configuration register for input signal 8"] # [inline (always)] pub const fn func8_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (8) } # [doc = "0x3a0 - Configuration register for input signal 9"] # [inline (always)] pub const fn func9_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (9) } # [doc = "0x3a4 - Configuration register for input signal 10"] # [inline (always)] pub const fn func10_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (10) } # [doc = "0x3a8 - Configuration register for input signal 11"] # [inline (always)] pub const fn func11_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (11) } # [doc = "0x3ac - Configuration register for input signal 12"] # [inline (always)] pub const fn func12_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (12) } # [doc = "0x3b0 - Configuration register for input signal 13"] # [inline (always)] pub const fn func13_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (13) } # [doc = "0x3b4 - Configuration register for input signal 14"] # [inline (always)] pub const fn func14_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (14) } # [doc = "0x3b8 - Configuration register for input signal 15"] # [inline (always)] pub const fn func15_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (15) } # [doc = "0x3bc - Configuration register for input signal 16"] # [inline (always)] pub const fn func16_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (16) } # [doc = "0x3c0 - Configuration register for input signal 17"] # [inline (always)] pub const fn func17_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (17) } # [doc = "0x3c4 - Configuration register for input signal 18"] # [inline (always)] pub const fn func18_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (18) } # [doc = "0x3c8 - Configuration register for input signal 19"] # [inline (always)] pub const fn func19_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (19) } # [doc = "0x3cc - Configuration register for input signal 20"] # [inline (always)] pub const fn func20_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func_in_sel_cfg (20) } # [doc = "0x3dc - Configuration register for input signal 70"] # [inline (always)] pub const fn func70_in_sel_cfg (& self) -> & FUNC70_IN_SEL_CFG { & self . func70_in_sel_cfg } # [doc = "0x3ec..0x438 - Configuration register for input signal %s"] # [inline (always)] pub const fn func0_in_sel_cfg (& self , n : usize) -> & FUNC_IN_SEL_CFG { & self . func0_in_sel_cfg [n] } # [doc = "Iterator for array of:"] # [doc = "0x3ec..0x438 - Configuration register for input signal %s"] # [inline (always)] pub fn func0_in_sel_cfg_iter (& self) -> impl Iterator < Item = & FUNC_IN_SEL_CFG > { self . func0_in_sel_cfg . iter () } # [doc = "0x3ec - Configuration register for input signal 0"] # [inline (always)] pub const fn func0_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (0) } # [doc = "0x3f0 - Configuration register for input signal 1"] # [inline (always)] pub const fn func1_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (1) } # [doc = "0x3f4 - Configuration register for input signal 2"] # [inline (always)] pub const fn func2_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (2) } # [doc = "0x3f8 - Configuration register for input signal 3"] # [inline (always)] pub const fn func3_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (3) } # [doc = "0x3fc - Configuration register for input signal 4"] # [inline (always)] pub const fn func4_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (4) } # [doc = "0x400 - Configuration register for input signal 5"] # [inline (always)] pub const fn func5_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (5) } # [doc = "0x404 - Configuration register for input signal 6"] # [inline (always)] pub const fn func6_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (6) } # [doc = "0x408 - Configuration register for input signal 7"] # [inline (always)] pub const fn func7_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (7) } # [doc = "0x40c - Configuration register for input signal 8"] # [inline (always)] pub const fn func8_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (8) } # [doc = "0x410 - Configuration register for input signal 9"] # [inline (always)] pub const fn func9_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (9) } # [doc = "0x414 - Configuration register for input signal 10"] # [inline (always)] pub const fn func10_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (10) } # [doc = "0x418 - Configuration register for input signal 11"] # [inline (always)] pub const fn func11_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (11) } # [doc = "0x41c - Configuration register for input signal 12"] # [inline (always)] pub const fn func12_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (12) } # [doc = "0x420 - Configuration register for input signal 13"] # [inline (always)] pub const fn func13_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (13) } # [doc = "0x424 - Configuration register for input signal 14"] # [inline (always)] pub const fn func14_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (14) } # [doc = "0x428 - Configuration register for input signal 15"] # [inline (always)] pub const fn func15_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (15) } # [doc = "0x42c - Configuration register for input signal 16"] # [inline (always)] pub const fn func16_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (16) } # [doc = "0x430 - Configuration register for input signal 17"] # [inline (always)] pub const fn func17_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (17) } # [doc = "0x434 - Configuration register for input signal 18"] # [inline (always)] pub const fn func18_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (18) } # [doc = "0x448..0x498 - Configuration register for input signal %s"] # [inline (always)] pub const fn func0_in_sel_cfg (& self , n : usize) -> & FUNC_IN_SEL_CFG { & self . func0_in_sel_cfg [n] } # [doc = "Iterator for array of:"] # [doc = "0x448..0x498 - Configuration register for input signal %s"] # [inline (always)] pub fn func0_in_sel_cfg_iter (& self) -> impl Iterator < Item = & FUNC_IN_SEL_CFG > { self . func0_in_sel_cfg . iter () } # [doc = "0x448 - Configuration register for input signal 0"] # [inline (always)] pub const fn func0_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (0) } # [doc = "0x44c - Configuration register for input signal 1"] # [inline (always)] pub const fn func1_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (1) } # [doc = "0x450 - Configuration register for input signal 2"] # [inline (always)] pub const fn func2_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (2) } # [doc = "0x454 - Configuration register for input signal 3"] # [inline (always)] pub const fn func3_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (3) } # [doc = "0x458 - Configuration register for input signal 4"] # [inline (always)] pub const fn func4_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (4) } # [doc = "0x45c - Configuration register for input signal 5"] # [inline (always)] pub const fn func5_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (5) } # [doc = "0x460 - Configuration register for input signal 6"] # [inline (always)] pub const fn func6_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (6) } # [doc = "0x464 - Configuration register for input signal 7"] # [inline (always)] pub const fn func7_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (7) } # [doc = "0x468 - Configuration register for input signal 8"] # [inline (always)] pub const fn func8_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (8) } # [doc = "0x46c - Configuration register for input signal 9"] # [inline (always)] pub const fn func9_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (9) } # [doc = "0x470 - Configuration register for input signal 10"] # [inline (always)] pub const fn func10_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (10) } # [doc = "0x474 - Configuration register for input signal 11"] # [inline (always)] pub const fn func11_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (11) } # [doc = "0x478 - Configuration register for input signal 12"] # [inline (always)] pub const fn func12_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (12) } # [doc = "0x47c - Configuration register for input signal 13"] # [inline (always)] pub const fn func13_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (13) } # [doc = "0x480 - Configuration register for input signal 14"] # [inline (always)] pub const fn func14_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (14) } # [doc = "0x484 - Configuration register for input signal 15"] # [inline (always)] pub const fn func15_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (15) } # [doc = "0x488 - Configuration register for input signal 16"] # [inline (always)] pub const fn func16_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (16) } # [doc = "0x48c - Configuration register for input signal 17"] # [inline (always)] pub const fn func17_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (17) } # [doc = "0x490 - Configuration register for input signal 18"] # [inline (always)] pub const fn func18_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (18) } # [doc = "0x494 - Configuration register for input signal 19"] # [inline (always)] pub const fn func19_in_sel_cfg (& self) -> & FUNC_IN_SEL_CFG { self . func0_in_sel_cfg (19) } # [doc = "0xac4..0xb38 - Configuration register for GPIO%s output"] # [inline (always)] pub const fn func_out_sel_cfg (& self , n : usize) -> & FUNC_OUT_SEL_CFG { & self . func_out_sel_cfg [n] } # [doc = "Iterator for array of:"] # [doc = "0xac4..0xb38 - Configuration register for GPIO%s output"] # [inline (always)] pub fn func_out_sel_cfg_iter (& self) -> impl Iterator < Item = & FUNC_OUT_SEL_CFG > { self . func_out_sel_cfg . iter () } # [doc = "0xac4 - Configuration register for GPIO0 output"] # [inline (always)] pub const fn func0_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (0) } # [doc = "0xac8 - Configuration register for GPIO1 output"] # [inline (always)] pub const fn func1_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (1) } # [doc = "0xacc - Configuration register for GPIO2 output"] # [inline (always)] pub const fn func2_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (2) } # [doc = "0xad0 - Configuration register for GPIO3 output"] # [inline (always)] pub const fn func3_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (3) } # [doc = "0xad4 - Configuration register for GPIO4 output"] # [inline (always)] pub const fn func4_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (4) } # [doc = "0xad8 - Configuration register for GPIO5 output"] # [inline (always)] pub const fn func5_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (5) } # [doc = "0xadc - Configuration register for GPIO6 output"] # [inline (always)] pub const fn func6_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (6) } # [doc = "0xae0 - Configuration register for GPIO7 output"] # [inline (always)] pub const fn func7_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (7) } # [doc = "0xae4 - Configuration register for GPIO8 output"] # [inline (always)] pub const fn func8_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (8) } # [doc = "0xae8 - Configuration register for GPIO9 output"] # [inline (always)] pub const fn func9_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (9) } # [doc = "0xaec - Configuration register for GPIO10 output"] # [inline (always)] pub const fn func10_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (10) } # [doc = "0xaf0 - Configuration register for GPIO11 output"] # [inline (always)] pub const fn func11_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (11) } # [doc = "0xaf4 - Configuration register for GPIO12 output"] # [inline (always)] pub const fn func12_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (12) } # [doc = "0xaf8 - Configuration register for GPIO13 output"] # [inline (always)] pub const fn func13_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (13) } # [doc = "0xafc - Configuration register for GPIO14 output"] # [inline (always)] pub const fn func14_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (14) } # [doc = "0xb00 - Configuration register for GPIO15 output"] # [inline (always)] pub const fn func15_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (15) } # [doc = "0xb04 - Configuration register for GPIO16 output"] # [inline (always)] pub const fn func16_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (16) } # [doc = "0xb08 - Configuration register for GPIO17 output"] # [inline (always)] pub const fn func17_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (17) } # [doc = "0xb0c - Configuration register for GPIO18 output"] # [inline (always)] pub const fn func18_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (18) } # [doc = "0xb10 - Configuration register for GPIO19 output"] # [inline (always)] pub const fn func19_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (19) } # [doc = "0xb14 - Configuration register for GPIO20 output"] # [inline (always)] pub const fn func20_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (20) } # [doc = "0xb18 - Configuration register for GPIO21 output"] # [inline (always)] pub const fn func21_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (21) } # [doc = "0xb1c - Configuration register for GPIO22 output"] # [inline (always)] pub const fn func22_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (22) } # [doc = "0xb20 - Configuration register for GPIO23 output"] # [inline (always)] pub const fn func23_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (23) } # [doc = "0xb24 - Configuration register for GPIO24 output"] # [inline (always)] pub const fn func24_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (24) } # [doc = "0xb28 - Configuration register for GPIO25 output"] # [inline (always)] pub const fn func25_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (25) } # [doc = "0xb2c - Configuration register for GPIO26 output"] # [inline (always)] pub const fn func26_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (26) } # [doc = "0xb30 - Configuration register for GPIO27 output"] # [inline (always)] pub const fn func27_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (27) } # [doc = "0xb34 - Configuration register for GPIO28 output"] # [inline (always)] pub const fn func28_out_sel_cfg (& self) -> & FUNC_OUT_SEL_CFG { self . func_out_sel_cfg (28) } # [doc = "0xb38 - Configuration register for GPIO$n output"] # [inline (always)] pub const fn func29_out_sel_cfg (& self) -> & FUNC29_OUT_SEL_CFG { & self . func29_out_sel_cfg } # [doc = "0xb3c - Configuration register for GPIO$n output"] # [inline (always)] pub const fn func30_out_sel_cfg (& self) -> & FUNC30_OUT_SEL_CFG { & self . func30_out_sel_cfg } # [doc = "0xb40 - Configuration register for GPIO$n output"] # [inline (always)] pub const fn func31_out_sel_cfg (& self) -> & FUNC31_OUT_SEL_CFG { & self . func31_out_sel_cfg } # [doc = "0xb44 - Configuration register for GPIO$n output"] # [inline (always)] pub const fn func32_out_sel_cfg (& self) -> & FUNC32_OUT_SEL_CFG { & self . func32_out_sel_cfg } # [doc = "0xdf8 - GPIO clock gate register"] # [inline (always)] pub const fn clock_gate (& self) -> & CLOCK_GATE { & self . clock_gate } # [doc = "0xdfc - GPIO version register"] # [inline (always)] pub const fn date (& self) -> & DATE { & self . date } } # [doc = "STRAP (r) register accessor: Strapping pin register\n\nYou can [`read`](crate::Reg::read) this register and get [`strap::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@strap`] module"] pub type STRAP = crate :: Reg < strap :: STRAP_SPEC > ; # [doc = "Strapping pin register"] pub mod strap ; # [doc = "OUT (rw) register accessor: GPIO output register\n\nYou can [`read`](crate::Reg::read) this register and get [`out::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out`] module"] pub type OUT = crate :: Reg < out :: OUT_SPEC > ; # [doc = "GPIO output register"] pub mod out ; # [doc = "OUT_W1TS (w) register accessor: GPIO output set register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out_w1ts::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out_w1ts`] module"] pub type OUT_W1TS = crate :: Reg < out_w1ts :: OUT_W1TS_SPEC > ; # [doc = "GPIO output set register"] pub mod out_w1ts ; # [doc = "OUT_W1TC (w) register accessor: GPIO output clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out_w1tc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out_w1tc`] module"] pub type OUT_W1TC = crate :: Reg < out_w1tc :: OUT_W1TC_SPEC > ; # [doc = "GPIO output clear register"] pub mod out_w1tc ; # [doc = "OUT1 (rw) register accessor: GPIO output register for GPIO32-32\n\nYou can [`read`](crate::Reg::read) this register and get [`out1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out1`] module"] pub type OUT1 = crate :: Reg < out1 :: OUT1_SPEC > ; # [doc = "GPIO output register for GPIO32-32"] pub mod out1 ; # [doc = "OUT1_W1TS (w) register accessor: GPIO output set register for GPIO32-32\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1_w1ts::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out1_w1ts`] module"] pub type OUT1_W1TS = crate :: Reg < out1_w1ts :: OUT1_W1TS_SPEC > ; # [doc = "GPIO output set register for GPIO32-32"] pub mod out1_w1ts ; # [doc = "OUT1_W1TC (w) register accessor: GPIO output clear register for GPIO32-32\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1_w1tc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out1_w1tc`] module"] pub type OUT1_W1TC = crate :: Reg < out1_w1tc :: OUT1_W1TC_SPEC > ; # [doc = "GPIO output clear register for GPIO32-32"] pub mod out1_w1tc ; # [doc = "ENABLE (rw) register accessor: GPIO output enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`enable::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`enable::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@enable`] module"] pub type ENABLE = crate :: Reg < enable :: ENABLE_SPEC > ; # [doc = "GPIO output enable register"] pub mod enable ; # [doc = "ENABLE_W1TS (w) register accessor: GPIO output enable set register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`enable_w1ts::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@enable_w1ts`] module"] pub type ENABLE_W1TS = crate :: Reg < enable_w1ts :: ENABLE_W1TS_SPEC > ; # [doc = "GPIO output enable set register"] pub mod enable_w1ts ; # [doc = "ENABLE_W1TC (w) register accessor: GPIO output enable clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`enable_w1tc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@enable_w1tc`] module"] pub type ENABLE_W1TC = crate :: Reg < enable_w1tc :: ENABLE_W1TC_SPEC > ; # [doc = "GPIO output enable clear register"] pub mod enable_w1tc ; # [doc = "ENABLE1 (rw) register accessor: GPIO output enable register for GPIO32-32\n\nYou can [`read`](crate::Reg::read) this register and get [`enable1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`enable1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@enable1`] module"] pub type ENABLE1 = crate :: Reg < enable1 :: ENABLE1_SPEC > ; # [doc = "GPIO output enable register for GPIO32-32"] pub mod enable1 ; # [doc = "ENABLE1_W1TS (w) register accessor: GPIO output enable set register for GPIO32-32\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`enable1_w1ts::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@enable1_w1ts`] module"] pub type ENABLE1_W1TS = crate :: Reg < enable1_w1ts :: ENABLE1_W1TS_SPEC > ; # [doc = "GPIO output enable set register for GPIO32-32"] pub mod enable1_w1ts ; # [doc = "ENABLE1_W1TC (w) register accessor: GPIO output enable clear register for GPIO32-32\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`enable1_w1tc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@enable1_w1tc`] module"] pub type ENABLE1_W1TC = crate :: Reg < enable1_w1tc :: ENABLE1_W1TC_SPEC > ; # [doc = "GPIO output enable clear register for GPIO32-32"] pub mod enable1_w1tc ; # [doc = "IN (r) register accessor: GPIO input register\n\nYou can [`read`](crate::Reg::read) this register and get [`in_::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@in_`] module"] pub type IN = crate :: Reg < in_ :: IN_SPEC > ; # [doc = "GPIO input register"] pub mod in_ ; # [doc = "IN1 (r) register accessor: GPIO input register for GPIO32-32\n\nYou can [`read`](crate::Reg::read) this register and get [`in1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@in1`] module"] pub type IN1 = crate :: Reg < in1 :: IN1_SPEC > ; # [doc = "GPIO input register for GPIO32-32"] pub mod in1 ; # [doc = "STATUS (rw) register accessor: GPIO interrupt status register\n\nYou can [`read`](crate::Reg::read) this register and get [`status::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`status::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status`] module"] pub type STATUS = crate :: Reg < status :: STATUS_SPEC > ; # [doc = "GPIO interrupt status register"] pub mod status ; # [doc = "STATUS_W1TS (w) register accessor: GPIO interrupt status set register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`status_w1ts::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status_w1ts`] module"] pub type STATUS_W1TS = crate :: Reg < status_w1ts :: STATUS_W1TS_SPEC > ; # [doc = "GPIO interrupt status set register"] pub mod status_w1ts ; # [doc = "STATUS_W1TC (w) register accessor: GPIO interrupt status clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`status_w1tc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status_w1tc`] module"] pub type STATUS_W1TC = crate :: Reg < status_w1tc :: STATUS_W1TC_SPEC > ; # [doc = "GPIO interrupt status clear register"] pub mod status_w1tc ; # [doc = "STATUS1 (rw) register accessor: GPIO interrupt status register for GPIO32-32\n\nYou can [`read`](crate::Reg::read) this register and get [`status1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`status1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status1`] module"] pub type STATUS1 = crate :: Reg < status1 :: STATUS1_SPEC > ; # [doc = "GPIO interrupt status register for GPIO32-32"] pub mod status1 ; # [doc = "STATUS1_W1TS (w) register accessor: GPIO interrupt status set register for GPIO32-32\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`status1_w1ts::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status1_w1ts`] module"] pub type STATUS1_W1TS = crate :: Reg < status1_w1ts :: STATUS1_W1TS_SPEC > ; # [doc = "GPIO interrupt status set register for GPIO32-32"] pub mod status1_w1ts ; # [doc = "STATUS1_W1TC (w) register accessor: GPIO interrupt status clear register for GPIO32-32\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`status1_w1tc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status1_w1tc`] module"] pub type STATUS1_W1TC = crate :: Reg < status1_w1tc :: STATUS1_W1TC_SPEC > ; # [doc = "GPIO interrupt status clear register for GPIO32-32"] pub mod status1_w1tc ; # [doc = "PROCPU_INT (r) register accessor: GPIO_PROCPU_INT interrupt status register for GPIO0-31\n\nYou can [`read`](crate::Reg::read) this register and get [`procpu_int::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@procpu_int`] module"] pub type PROCPU_INT = crate :: Reg < procpu_int :: PROCPU_INT_SPEC > ; # [doc = "GPIO_PROCPU_INT interrupt status register for GPIO0-31"] pub mod procpu_int ; # [doc = "PROCPU_INT1 (r) register accessor: GPIO_PROCPU_INT interrupt status register for GPIO32-32\n\nYou can [`read`](crate::Reg::read) this register and get [`procpu_int1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@procpu_int1`] module"] pub type PROCPU_INT1 = crate :: Reg < procpu_int1 :: PROCPU_INT1_SPEC > ; # [doc = "GPIO_PROCPU_INT interrupt status register for GPIO32-32"] pub mod procpu_int1 ; # [doc = "STATUS_NEXT (r) register accessor: GPIO interrupt source register\n\nYou can [`read`](crate::Reg::read) this register and get [`status_next::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status_next`] module"] pub type STATUS_NEXT = crate :: Reg < status_next :: STATUS_NEXT_SPEC > ; # [doc = "GPIO interrupt source register"] pub mod status_next ; # [doc = "STATUS_NEXT1 (r) register accessor: GPIO interrupt source register for GPIO32-32\n\nYou can [`read`](crate::Reg::read) this register and get [`status_next1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status_next1`] module"] pub type STATUS_NEXT1 = crate :: Reg < status_next1 :: STATUS_NEXT1_SPEC > ; # [doc = "GPIO interrupt source register for GPIO32-32"] pub mod status_next1 ; # [doc = "PIN (rw) register accessor: GPIO$N configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`pin::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pin::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pin`] module"] pub type PIN = crate :: Reg < pin :: PIN_SPEC > ; # [doc = "GPIO$N configuration register"] pub mod pin ; pub use PIN as PIN29 ; pub use pin as pin29 ; pub use PIN as PIN30 ; pub use pin as pin30 ; pub use PIN as PIN31 ; pub use pin as pin31 ; pub use PIN as PIN32 ; pub use pin as pin32 ; # [doc = "FUNC0_IN_SEL_CFG (rw) register accessor: Configuration register for input signal 0\n\nYou can [`read`](crate::Reg::read) this register and get [`func0_in_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func0_in_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func0_in_sel_cfg`] module"] pub type FUNC0_IN_SEL_CFG = crate :: Reg < func0_in_sel_cfg :: FUNC0_IN_SEL_CFG_SPEC > ; # [doc = "Configuration register for input signal 0"] pub mod func0_in_sel_cfg ; # [doc = "FUNC_IN_SEL_CFG (rw) register accessor: Configuration register for input signal %s\n\nYou can [`read`](crate::Reg::read) this register and get [`func_in_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func_in_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func_in_sel_cfg`] module"] pub type FUNC_IN_SEL_CFG = crate :: Reg < func_in_sel_cfg :: FUNC_IN_SEL_CFG_SPEC > ; # [doc = "Configuration register for input signal %s"] pub mod func_in_sel_cfg ; pub use FUNC_IN_SEL_CFG as FUNC_IN_SEL_CFG ; pub use func_in_sel_cfg as func_in_sel_cfg ; pub use FUNC_IN_SEL_CFG as FUNC_IN_SEL_CFG ; pub use func_in_sel_cfg as func_in_sel_cfg ; # [doc = "FUNC_IN_SEL_CFG (rw) register accessor: Configuration register for input signal %s\n\nYou can [`read`](crate::Reg::read) this register and get [`func_in_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func_in_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func_in_sel_cfg`] module"] pub type FUNC_IN_SEL_CFG = crate :: Reg < func_in_sel_cfg :: FUNC_IN_SEL_CFG_SPEC > ; # [doc = "Configuration register for input signal %s"] pub mod func_in_sel_cfg ; # [doc = "FUNC70_IN_SEL_CFG (rw) register accessor: Configuration register for input signal 70\n\nYou can [`read`](crate::Reg::read) this register and get [`func70_in_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func70_in_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func70_in_sel_cfg`] module"] pub type FUNC70_IN_SEL_CFG = crate :: Reg < func70_in_sel_cfg :: FUNC70_IN_SEL_CFG_SPEC > ; # [doc = "Configuration register for input signal 70"] pub mod func70_in_sel_cfg ; pub use FUNC_IN_SEL_CFG as FUNC_IN_SEL_CFG ; pub use func_in_sel_cfg as func_in_sel_cfg ; pub use FUNC_IN_SEL_CFG as FUNC_IN_SEL_CFG ; pub use func_in_sel_cfg as func_in_sel_cfg ; # [doc = "FUNC_OUT_SEL_CFG (rw) register accessor: Configuration register for GPIO%s output\n\nYou can [`read`](crate::Reg::read) this register and get [`func_out_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func_out_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func_out_sel_cfg`] module"] pub type FUNC_OUT_SEL_CFG = crate :: Reg < func_out_sel_cfg :: FUNC_OUT_SEL_CFG_SPEC > ; # [doc = "Configuration register for GPIO%s output"] pub mod func_out_sel_cfg ; # [doc = "FUNC29_OUT_SEL_CFG (rw) register accessor: Configuration register for GPIO$n output\n\nYou can [`read`](crate::Reg::read) this register and get [`func29_out_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func29_out_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func29_out_sel_cfg`] module"] pub type FUNC29_OUT_SEL_CFG = crate :: Reg < func29_out_sel_cfg :: FUNC29_OUT_SEL_CFG_SPEC > ; # [doc = "Configuration register for GPIO$n output"] pub mod func29_out_sel_cfg ; # [doc = "FUNC30_OUT_SEL_CFG (rw) register accessor: Configuration register for GPIO$n output\n\nYou can [`read`](crate::Reg::read) this register and get [`func30_out_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func30_out_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func30_out_sel_cfg`] module"] pub type FUNC30_OUT_SEL_CFG = crate :: Reg < func30_out_sel_cfg :: FUNC30_OUT_SEL_CFG_SPEC > ; # [doc = "Configuration register for GPIO$n output"] pub mod func30_out_sel_cfg ; # [doc = "FUNC31_OUT_SEL_CFG (rw) register accessor: Configuration register for GPIO$n output\n\nYou can [`read`](crate::Reg::read) this register and get [`func31_out_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func31_out_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func31_out_sel_cfg`] module"] pub type FUNC31_OUT_SEL_CFG = crate :: Reg < func31_out_sel_cfg :: FUNC31_OUT_SEL_CFG_SPEC > ; # [doc = "Configuration register for GPIO$n output"] pub mod func31_out_sel_cfg ; # [doc = "FUNC32_OUT_SEL_CFG (rw) register accessor: Configuration register for GPIO$n output\n\nYou can [`read`](crate::Reg::read) this register and get [`func32_out_sel_cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func32_out_sel_cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@func32_out_sel_cfg`] module"] pub type FUNC32_OUT_SEL_CFG = crate :: Reg < func32_out_sel_cfg :: FUNC32_OUT_SEL_CFG_SPEC > ; # [doc = "Configuration register for GPIO$n output"] pub mod func32_out_sel_cfg ; # [doc = "CLOCK_GATE (rw) register accessor: GPIO clock gate register\n\nYou can [`read`](crate::Reg::read) this register and get [`clock_gate::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`clock_gate::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clock_gate`] module"] pub type CLOCK_GATE = crate :: Reg < clock_gate :: CLOCK_GATE_SPEC > ; # [doc = "GPIO clock gate register"] pub mod clock_gate ; # [doc = "DATE (rw) register accessor: GPIO version register\n\nYou can [`read`](crate::Reg::read) this register and get [`date::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`date::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@date`] module"] pub type DATE = crate :: Reg < date :: DATE_SPEC > ; # [doc = "GPIO version register"] pub mod date ;