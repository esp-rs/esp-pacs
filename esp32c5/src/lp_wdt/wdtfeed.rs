# [doc = "Register `WDTFEED` writer"] pub type W = crate :: W < WDTFEED_SPEC > ; # [doc = "Field `RTC_WDT_FEED` writer - Configure this bit to feed the RWDT.\\\\ 0: Invalid\\\\ 1: Feed RWDT"] pub type RTC_WDT_FEED_W < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [cfg (feature = "impl-register-debug")] impl core :: fmt :: Debug for crate :: generic :: Reg < WDTFEED_SPEC > { fn fmt (& self , f : & mut core :: fmt :: Formatter < '_ >) -> core :: fmt :: Result { write ! (f , "(not readable)") } } impl W { # [doc = "Bit 31 - Configure this bit to feed the RWDT.\\\\ 0: Invalid\\\\ 1: Feed RWDT"] # [inline (always)] pub fn rtc_wdt_feed (& mut self) -> RTC_WDT_FEED_W < WDTFEED_SPEC > { RTC_WDT_FEED_W :: new (self , 31) } } # [doc = "Configure the feed function of RWDT\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdtfeed::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct WDTFEED_SPEC ; impl crate :: RegisterSpec for WDTFEED_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [`wdtfeed::W`](W) writer structure"] impl crate :: Writable for WDTFEED_SPEC { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets WDTFEED to value 0"] impl crate :: Resettable for WDTFEED_SPEC { const RESET_VALUE : u32 = 0 ; }