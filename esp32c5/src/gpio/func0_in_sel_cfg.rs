# [doc = "Register `FUNC0_IN_SEL_CFG` reader"] pub type R = crate :: R < FUNC0_IN_SEL_CFG_SPEC > ; # [doc = "Register `FUNC0_IN_SEL_CFG` writer"] pub type W = crate :: W < FUNC0_IN_SEL_CFG_SPEC > ; # [doc = "Field `FUNC0_IN_SEL` reader - Configures to select a pin from the 29 GPIO pins to connect the input signal 0.\\\\ 0: Select GPIO0\\\\ 1: Select GPIO1\\\\ ......\\\\ 27: Select GPIO27\\\\ 28: Select GPIO28\\\\ Or\\\\ 0x40: A constantly high input\\\\ 0x50: A constantly low input\\\\"] pub type FUNC0_IN_SEL_R = crate :: FieldReader ; # [doc = "Field `FUNC0_IN_SEL` writer - Configures to select a pin from the 29 GPIO pins to connect the input signal 0.\\\\ 0: Select GPIO0\\\\ 1: Select GPIO1\\\\ ......\\\\ 27: Select GPIO27\\\\ 28: Select GPIO28\\\\ Or\\\\ 0x40: A constantly high input\\\\ 0x50: A constantly low input\\\\"] pub type FUNC0_IN_SEL_W < 'a , REG > = crate :: FieldWriter < 'a , REG , 7 > ; # [doc = "Field `FUNC0_IN_INV_SEL` reader - Configures whether or not to invert the input value.\\\\ 0: Not invert\\\\ 1: Invert\\\\"] pub type FUNC0_IN_INV_SEL_R = crate :: BitReader ; # [doc = "Field `FUNC0_IN_INV_SEL` writer - Configures whether or not to invert the input value.\\\\ 0: Not invert\\\\ 1: Invert\\\\"] pub type FUNC0_IN_INV_SEL_W < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `SIG0_IN_SEL` reader - Configures whether or not to route signals via GPIO matrix.\\\\ 0: Bypass GPIO matrix, i.e., connect signals directly to peripheral configured in IO MUX.\\\\ 1: Route signals via GPIO matrix.\\\\"] pub type SIG0_IN_SEL_R = crate :: BitReader ; # [doc = "Field `SIG0_IN_SEL` writer - Configures whether or not to route signals via GPIO matrix.\\\\ 0: Bypass GPIO matrix, i.e., connect signals directly to peripheral configured in IO MUX.\\\\ 1: Route signals via GPIO matrix.\\\\"] pub type SIG0_IN_SEL_W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Bits 0:6 - Configures to select a pin from the 29 GPIO pins to connect the input signal 0.\\\\ 0: Select GPIO0\\\\ 1: Select GPIO1\\\\ ......\\\\ 27: Select GPIO27\\\\ 28: Select GPIO28\\\\ Or\\\\ 0x40: A constantly high input\\\\ 0x50: A constantly low input\\\\"] # [inline (always)] pub fn func0_in_sel (& self) -> FUNC0_IN_SEL_R { FUNC0_IN_SEL_R :: new ((self . bits & 0x7f) as u8) } # [doc = "Bit 7 - Configures whether or not to invert the input value.\\\\ 0: Not invert\\\\ 1: Invert\\\\"] # [inline (always)] pub fn func0_in_inv_sel (& self) -> FUNC0_IN_INV_SEL_R { FUNC0_IN_INV_SEL_R :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Configures whether or not to route signals via GPIO matrix.\\\\ 0: Bypass GPIO matrix, i.e., connect signals directly to peripheral configured in IO MUX.\\\\ 1: Route signals via GPIO matrix.\\\\"] # [inline (always)] pub fn sig0_in_sel (& self) -> SIG0_IN_SEL_R { SIG0_IN_SEL_R :: new (((self . bits >> 8) & 1) != 0) } } # [cfg (feature = "impl-register-debug")] impl core :: fmt :: Debug for R { fn fmt (& self , f : & mut core :: fmt :: Formatter) -> core :: fmt :: Result { f . debug_struct ("FUNC0_IN_SEL_CFG") . field ("func0_in_sel" , & self . func0_in_sel ()) . field ("func0_in_inv_sel" , & self . func0_in_inv_sel ()) . field ("sig0_in_sel" , & self . sig0_in_sel ()) . finish () } } impl W { # [doc = "Bits 0:6 - Configures to select a pin from the 29 GPIO pins to connect the input signal 0.\\\\ 0: Select GPIO0\\\\ 1: Select GPIO1\\\\ ......\\\\ 27: Select GPIO27\\\\ 28: Select GPIO28\\\\ Or\\\\ 0x40: A constantly high input\\\\ 0x50: A constantly low input\\\\"] # [inline (always)] pub fn func0_in_sel (& mut self) -> FUNC0_IN_SEL_W < FUNC0_IN_SEL_CFG_SPEC > { FUNC0_IN_SEL_W :: new (self , 0) } # [doc = "Bit 7 - Configures whether or not to invert the input value.\\\\ 0: Not invert\\\\ 1: Invert\\\\"] # [inline (always)] pub fn func0_in_inv_sel (& mut self) -> FUNC0_IN_INV_SEL_W < FUNC0_IN_SEL_CFG_SPEC > { FUNC0_IN_INV_SEL_W :: new (self , 7) } # [doc = "Bit 8 - Configures whether or not to route signals via GPIO matrix.\\\\ 0: Bypass GPIO matrix, i.e., connect signals directly to peripheral configured in IO MUX.\\\\ 1: Route signals via GPIO matrix.\\\\"] # [inline (always)] pub fn sig0_in_sel (& mut self) -> SIG0_IN_SEL_W < FUNC0_IN_SEL_CFG_SPEC > { SIG0_IN_SEL_W :: new (self , 8) } } # [doc = "Configuration register for input signal 0\n\nYou can [`read`](crate::Reg::read) this register and get [`func0_in_sel_cfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`func0_in_sel_cfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct FUNC0_IN_SEL_CFG_SPEC ; impl crate :: RegisterSpec for FUNC0_IN_SEL_CFG_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [`func0_in_sel_cfg::R`](R) reader structure"] impl crate :: Readable for FUNC0_IN_SEL_CFG_SPEC { } # [doc = "`write(|w| ..)` method takes [`func0_in_sel_cfg::W`](W) writer structure"] impl crate :: Writable for FUNC0_IN_SEL_CFG_SPEC { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets FUNC0_IN_SEL_CFG to value 0x60"] impl crate :: Resettable for FUNC0_IN_SEL_CFG_SPEC { const RESET_VALUE : u32 = 0x60 ; }