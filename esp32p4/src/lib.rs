#![doc = "Peripheral access API for ESP32-P4 microcontrollers (generated using svd2rust v0.36.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![doc(html_logo_url = "https://avatars.githubusercontent.com/u/46717278")]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 0;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn LP_WDT();
    fn LP_TIMER0();
    fn LP_TIMER1();
    fn PMU0();
    fn PMU1();
    fn LP_ANA();
    fn LP_ADC();
    fn LP_GPIO();
    fn LP_I2C0();
    fn LP_I2S0();
    fn LP_TOUCH();
    fn LP_TSENS();
    fn LP_UART();
    fn LP_SYS();
    fn LP_HUK();
    fn USB_DEVICE();
    fn DMA();
    fn SPI2();
    fn SPI3();
    fn I2S0();
    fn I2S1();
    fn I2S2();
    fn UHCI0();
    fn UART0();
    fn UART1();
    fn UART2();
    fn UART3();
    fn UART4();
    fn PWM0();
    fn PWM1();
    fn TWAI0();
    fn TWAI1();
    fn TWAI2();
    fn RMT();
    fn I2C0();
    fn I2C1();
    fn TG0_T0_LEVEL();
    fn TG0_T1_LEVEL();
    fn TG0_WDT_LEVEL();
    fn TG1_T0_LEVEL();
    fn TG1_T1_LEVEL();
    fn TG1_WDT_LEVEL();
    fn LEDC();
    fn SYSTIMER_TARGET0();
    fn SYSTIMER_TARGET1();
    fn SYSTIMER_TARGET2();
    fn AHB_PDMA_IN_CH0();
    fn AHB_PDMA_IN_CH1();
    fn AHB_PDMA_IN_CH2();
    fn AHB_PDMA_OUT_CH0();
    fn AHB_PDMA_OUT_CH1();
    fn AHB_PDMA_OUT_CH2();
    fn AXI_PDMA_IN_CH0();
    fn AXI_PDMA_IN_CH1();
    fn AXI_PDMA_IN_CH2();
    fn AXI_PDMA_OUT_CH0();
    fn AXI_PDMA_OUT_CH1();
    fn AXI_PDMA_OUT_CH2();
    fn RSA();
    fn AES();
    fn SHA();
    fn ECC();
    fn GPIO();
    fn GPIO_INT1();
    fn GPIO_INT2();
    fn GPIO_INT3();
    fn GPIO_PAD_COMP();
    fn FROM_CPU_INTR0();
    fn FROM_CPU_INTR1();
    fn FROM_CPU_INTR2();
    fn FROM_CPU_INTR3();
    fn CACHE();
    fn CSI_BRIDGE();
    fn DSI_BRIDGE();
    fn CSI();
    fn DSI();
    fn JPEG();
    fn PPA();
    fn ISP();
    fn I3C();
    fn I3C_SLV();
    fn HP_SYS();
    fn PCNT();
    fn PAU();
    fn PARLIO_RX();
    fn PARLIO_TX();
    fn H264_DMA2D_OUT_CH0();
    fn H264_DMA2D_OUT_CH1();
    fn H264_DMA2D_OUT_CH2();
    fn H264_DMA2D_OUT_CH3();
    fn H264_DMA2D_OUT_CH4();
    fn H264_DMA2D_IN_CH0();
    fn H264_DMA2D_IN_CH1();
    fn H264_DMA2D_IN_CH2();
    fn H264_DMA2D_IN_CH3();
    fn H264_DMA2D_IN_CH4();
    fn H264_DMA2D_IN_CH5();
    fn H264_REG();
    fn ASSIST_DEBUG();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".rwtext"]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 128] = [
    Vector { _reserved: 0 },
    Vector { _handler: LP_WDT },
    Vector {
        _handler: LP_TIMER0,
    },
    Vector {
        _handler: LP_TIMER1,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: PMU0 },
    Vector { _handler: PMU1 },
    Vector { _handler: LP_ANA },
    Vector { _handler: LP_ADC },
    Vector { _handler: LP_GPIO },
    Vector { _handler: LP_I2C0 },
    Vector { _handler: LP_I2S0 },
    Vector { _reserved: 0 },
    Vector { _handler: LP_TOUCH },
    Vector { _handler: LP_TSENS },
    Vector { _handler: LP_UART },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: LP_SYS },
    Vector { _handler: LP_HUK },
    Vector { _reserved: 0 },
    Vector {
        _handler: USB_DEVICE,
    },
    Vector { _reserved: 0 },
    Vector { _handler: DMA },
    Vector { _handler: SPI2 },
    Vector { _handler: SPI3 },
    Vector { _handler: I2S0 },
    Vector { _handler: I2S1 },
    Vector { _handler: I2S2 },
    Vector { _handler: UHCI0 },
    Vector { _handler: UART0 },
    Vector { _handler: UART1 },
    Vector { _handler: UART2 },
    Vector { _handler: UART3 },
    Vector { _handler: UART4 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: PWM0 },
    Vector { _handler: PWM1 },
    Vector { _handler: TWAI0 },
    Vector { _handler: TWAI1 },
    Vector { _handler: TWAI2 },
    Vector { _handler: RMT },
    Vector { _handler: I2C0 },
    Vector { _handler: I2C1 },
    Vector {
        _handler: TG0_T0_LEVEL,
    },
    Vector {
        _handler: TG0_T1_LEVEL,
    },
    Vector {
        _handler: TG0_WDT_LEVEL,
    },
    Vector {
        _handler: TG1_T0_LEVEL,
    },
    Vector {
        _handler: TG1_T1_LEVEL,
    },
    Vector {
        _handler: TG1_WDT_LEVEL,
    },
    Vector { _handler: LEDC },
    Vector {
        _handler: SYSTIMER_TARGET0,
    },
    Vector {
        _handler: SYSTIMER_TARGET1,
    },
    Vector {
        _handler: SYSTIMER_TARGET2,
    },
    Vector {
        _handler: AHB_PDMA_IN_CH0,
    },
    Vector {
        _handler: AHB_PDMA_IN_CH1,
    },
    Vector {
        _handler: AHB_PDMA_IN_CH2,
    },
    Vector {
        _handler: AHB_PDMA_OUT_CH0,
    },
    Vector {
        _handler: AHB_PDMA_OUT_CH1,
    },
    Vector {
        _handler: AHB_PDMA_OUT_CH2,
    },
    Vector {
        _handler: AXI_PDMA_IN_CH0,
    },
    Vector {
        _handler: AXI_PDMA_IN_CH1,
    },
    Vector {
        _handler: AXI_PDMA_IN_CH2,
    },
    Vector {
        _handler: AXI_PDMA_OUT_CH0,
    },
    Vector {
        _handler: AXI_PDMA_OUT_CH1,
    },
    Vector {
        _handler: AXI_PDMA_OUT_CH2,
    },
    Vector { _handler: RSA },
    Vector { _handler: AES },
    Vector { _handler: SHA },
    Vector { _handler: ECC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPIO },
    Vector {
        _handler: GPIO_INT1,
    },
    Vector {
        _handler: GPIO_INT2,
    },
    Vector {
        _handler: GPIO_INT3,
    },
    Vector {
        _handler: GPIO_PAD_COMP,
    },
    Vector {
        _handler: FROM_CPU_INTR0,
    },
    Vector {
        _handler: FROM_CPU_INTR1,
    },
    Vector {
        _handler: FROM_CPU_INTR2,
    },
    Vector {
        _handler: FROM_CPU_INTR3,
    },
    Vector { _handler: CACHE },
    Vector { _reserved: 0 },
    Vector {
        _handler: CSI_BRIDGE,
    },
    Vector {
        _handler: DSI_BRIDGE,
    },
    Vector { _handler: CSI },
    Vector { _handler: DSI },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: JPEG },
    Vector { _handler: PPA },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: ISP },
    Vector { _handler: I3C },
    Vector { _handler: I3C_SLV },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: HP_SYS },
    Vector { _handler: PCNT },
    Vector { _handler: PAU },
    Vector {
        _handler: PARLIO_RX,
    },
    Vector {
        _handler: PARLIO_TX,
    },
    Vector {
        _handler: H264_DMA2D_OUT_CH0,
    },
    Vector {
        _handler: H264_DMA2D_OUT_CH1,
    },
    Vector {
        _handler: H264_DMA2D_OUT_CH2,
    },
    Vector {
        _handler: H264_DMA2D_OUT_CH3,
    },
    Vector {
        _handler: H264_DMA2D_OUT_CH4,
    },
    Vector {
        _handler: H264_DMA2D_IN_CH0,
    },
    Vector {
        _handler: H264_DMA2D_IN_CH1,
    },
    Vector {
        _handler: H264_DMA2D_IN_CH2,
    },
    Vector {
        _handler: H264_DMA2D_IN_CH3,
    },
    Vector {
        _handler: H264_DMA2D_IN_CH4,
    },
    Vector {
        _handler: H264_DMA2D_IN_CH5,
    },
    Vector { _handler: H264_REG },
    Vector {
        _handler: ASSIST_DEBUG,
    },
];
#[doc(hidden)]
pub mod interrupt;
pub use self::interrupt::Interrupt;
#[doc = "Core Local Interrupt Controller (CLIC)"]
pub type CLIC = crate::Periph<clic::RegisterBlock, 0x2080_0000>;
impl core::fmt::Debug for CLIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CLIC").finish()
    }
}
#[doc = "Core Local Interrupt Controller (CLIC)"]
pub mod clic;
#[doc = "ADC (Analog to Digital Converter)"]
pub type ADC = crate::Periph<adc::RegisterBlock, 0x500d_e000>;
impl core::fmt::Debug for ADC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC").finish()
    }
}
#[doc = "ADC (Analog to Digital Converter)"]
pub mod adc;
#[doc = "AES (Advanced Encryption Standard) Accelerator"]
pub type AES = crate::Periph<aes::RegisterBlock, 0x5009_0000>;
impl core::fmt::Debug for AES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AES").finish()
    }
}
#[doc = "AES (Advanced Encryption Standard) Accelerator"]
pub mod aes;
#[doc = "AHB_DMA Peripheral"]
pub type AHB_DMA = crate::Periph<ahb_dma::RegisterBlock, 0x5008_5000>;
impl core::fmt::Debug for AHB_DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AHB_DMA").finish()
    }
}
#[doc = "AHB_DMA Peripheral"]
pub mod ahb_dma;
#[doc = "LP_I2C_ANA_MST Peripheral"]
pub type LP_I2C_ANA_MST = crate::Periph<lp_i2c_ana_mst::RegisterBlock, 0x5012_4000>;
impl core::fmt::Debug for LP_I2C_ANA_MST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_I2C_ANA_MST").finish()
    }
}
#[doc = "LP_I2C_ANA_MST Peripheral"]
pub mod lp_i2c_ana_mst;
#[doc = "Debug Assist"]
pub type ASSIST_DEBUG = crate::Periph<assist_debug::RegisterBlock, 0x3ff0_6000>;
impl core::fmt::Debug for ASSIST_DEBUG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ASSIST_DEBUG").finish()
    }
}
#[doc = "Debug Assist"]
pub mod assist_debug;
#[doc = "AXI_DMA Peripheral"]
pub type AXI_DMA = crate::Periph<axi_dma::RegisterBlock, 0x5008_a000>;
impl core::fmt::Debug for AXI_DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AXI_DMA").finish()
    }
}
#[doc = "AXI_DMA Peripheral"]
pub mod axi_dma;
#[doc = "BITSCRAMBLER Peripheral"]
pub type BITSCRAMBLER = crate::Periph<bitscrambler::RegisterBlock, 0x500a_3000>;
impl core::fmt::Debug for BITSCRAMBLER {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BITSCRAMBLER").finish()
    }
}
#[doc = "BITSCRAMBLER Peripheral"]
pub mod bitscrambler;
#[doc = "CACHE Peripheral"]
pub type CACHE = crate::Periph<cache::RegisterBlock, 0x3ff1_0000>;
impl core::fmt::Debug for CACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CACHE").finish()
    }
}
#[doc = "CACHE Peripheral"]
pub mod cache;
#[doc = "Interrupt Controller (Core 0)"]
pub type INTERRUPT_CORE0 = crate::Periph<interrupt_core0::RegisterBlock, 0x500d_6000>;
impl core::fmt::Debug for INTERRUPT_CORE0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("INTERRUPT_CORE0").finish()
    }
}
#[doc = "Interrupt Controller (Core 0)"]
pub mod interrupt_core0;
#[doc = "Interrupt Controller (Core 1)"]
pub type INTERRUPT_CORE1 = crate::Periph<interrupt_core1::RegisterBlock, 0x500d_6800>;
impl core::fmt::Debug for INTERRUPT_CORE1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("INTERRUPT_CORE1").finish()
    }
}
#[doc = "Interrupt Controller (Core 1)"]
pub mod interrupt_core1;
#[doc = "MIPI Camera Interface Bridge"]
pub type MIPI_CSI_BRIDGE = crate::Periph<mipi_csi_bridge::RegisterBlock, 0x5009_f800>;
impl core::fmt::Debug for MIPI_CSI_BRIDGE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MIPI_CSI_BRIDGE").finish()
    }
}
#[doc = "MIPI Camera Interface Bridge"]
pub mod mipi_csi_bridge;
#[doc = "MIPI Camera Interface Host"]
pub type MIPI_CSI_HOST = crate::Periph<mipi_csi_host::RegisterBlock, 0x5009_f000>;
impl core::fmt::Debug for MIPI_CSI_HOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MIPI_CSI_HOST").finish()
    }
}
#[doc = "MIPI Camera Interface Host"]
pub mod mipi_csi_host;
#[doc = "DMA (Direct Memory Access) Controller"]
pub type DMA = crate::Periph<dma::RegisterBlock, 0x5008_1000>;
impl core::fmt::Debug for DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA").finish()
    }
}
#[doc = "DMA (Direct Memory Access) Controller"]
pub mod dma;
#[doc = "Digital Signature"]
pub type DS = crate::Periph<ds::RegisterBlock, 0x5009_4000>;
impl core::fmt::Debug for DS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DS").finish()
    }
}
#[doc = "Digital Signature"]
pub mod ds;
#[doc = "MIPI Camera Interface Bridge"]
pub type MIPI_DSI_BRIDGE = crate::Periph<mipi_dsi_bridge::RegisterBlock, 0x500a_0800>;
impl core::fmt::Debug for MIPI_DSI_BRIDGE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MIPI_DSI_BRIDGE").finish()
    }
}
#[doc = "MIPI Camera Interface Bridge"]
pub mod mipi_dsi_bridge;
#[doc = "MIPI Display Interface Host"]
pub type MIPI_DSI_HOST = crate::Periph<mipi_dsi_host::RegisterBlock, 0x500a_0000>;
impl core::fmt::Debug for MIPI_DSI_HOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MIPI_DSI_HOST").finish()
    }
}
#[doc = "MIPI Display Interface Host"]
pub mod mipi_dsi_host;
#[doc = "ECC (ECC Hardware Accelerator)"]
pub type ECC = crate::Periph<ecc::RegisterBlock, 0x5009_3000>;
impl core::fmt::Debug for ECC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ECC").finish()
    }
}
#[doc = "ECC (ECC Hardware Accelerator)"]
pub mod ecc;
#[doc = "ECDSA (Elliptic Curve Digital Signature Algorithm) Accelerator"]
pub type ECDSA = crate::Periph<ecdsa::RegisterBlock, 0x5009_6000>;
impl core::fmt::Debug for ECDSA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ECDSA").finish()
    }
}
#[doc = "ECDSA (Elliptic Curve Digital Signature Algorithm) Accelerator"]
pub mod ecdsa;
#[doc = "eFuse Controller"]
pub type EFUSE = crate::Periph<efuse::RegisterBlock, 0x5012_d000>;
impl core::fmt::Debug for EFUSE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EFUSE").finish()
    }
}
#[doc = "eFuse Controller"]
pub mod efuse;
#[doc = "General Purpose Input/Output"]
pub type GPIO = crate::Periph<gpio::RegisterBlock, 0x500e_0000>;
impl core::fmt::Debug for GPIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO").finish()
    }
}
#[doc = "General Purpose Input/Output"]
pub mod gpio;
#[doc = "Sigma-Delta Modulation"]
pub type GPIO_SD = crate::Periph<gpio_sd::RegisterBlock, 0x500e_0f00>;
impl core::fmt::Debug for GPIO_SD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO_SD").finish()
    }
}
#[doc = "Sigma-Delta Modulation"]
pub mod gpio_sd;
#[doc = "H264 Encoder (Core)"]
pub type H264 = crate::Periph<h264::RegisterBlock, 0x5008_4000>;
impl core::fmt::Debug for H264 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("H264").finish()
    }
}
#[doc = "H264 Encoder (Core)"]
pub mod h264;
#[doc = "H264 Encoder (DMA)"]
pub type H264_DMA = crate::Periph<h264_dma::RegisterBlock, 0x500a_7000>;
impl core::fmt::Debug for H264_DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("H264_DMA").finish()
    }
}
#[doc = "H264 Encoder (DMA)"]
pub mod h264_dma;
#[doc = "HMAC (Hash-based Message Authentication Code) Accelerator"]
pub type HMAC = crate::Periph<hmac::RegisterBlock, 0x5009_5000>;
impl core::fmt::Debug for HMAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HMAC").finish()
    }
}
#[doc = "HMAC (Hash-based Message Authentication Code) Accelerator"]
pub mod hmac;
#[doc = "High-Power System"]
pub type HP_SYS = crate::Periph<hp_sys::RegisterBlock, 0x500e_5000>;
impl core::fmt::Debug for HP_SYS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HP_SYS").finish()
    }
}
#[doc = "High-Power System"]
pub mod hp_sys;
#[doc = "HP_SYS_CLKRST Peripheral"]
pub type HP_SYS_CLKRST = crate::Periph<hp_sys_clkrst::RegisterBlock, 0x500e_6000>;
impl core::fmt::Debug for HP_SYS_CLKRST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HP_SYS_CLKRST").finish()
    }
}
#[doc = "HP_SYS_CLKRST Peripheral"]
pub mod hp_sys_clkrst;
#[doc = "LP_HUK Peripheral"]
pub type LP_HUK = crate::Periph<lp_huk::RegisterBlock, 0x5011_4000>;
impl core::fmt::Debug for LP_HUK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_HUK").finish()
    }
}
#[doc = "LP_HUK Peripheral"]
pub mod lp_huk;
#[doc = "I2C (Inter-Integrated Circuit) Controller 0"]
pub type I2C0 = crate::Periph<i2c0::RegisterBlock, 0x500c_4000>;
impl core::fmt::Debug for I2C0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C0").finish()
    }
}
#[doc = "I2C (Inter-Integrated Circuit) Controller 0"]
pub mod i2c0;
#[doc = "I2C (Inter-Integrated Circuit) Controller 1"]
pub type I2C1 = crate::Periph<i2c0::RegisterBlock, 0x500c_5000>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
#[doc = "I2C (Inter-Integrated Circuit) Controller 1"]
pub use self::i2c0 as i2c1;
#[doc = "I2S (Inter-IC Sound) Controller 0"]
pub type I2S0 = crate::Periph<i2s0::RegisterBlock, 0x500c_6000>;
impl core::fmt::Debug for I2S0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2S0").finish()
    }
}
#[doc = "I2S (Inter-IC Sound) Controller 0"]
pub mod i2s0;
#[doc = "I2S (Inter-IC Sound) Controller 1"]
pub type I2S1 = crate::Periph<i2s0::RegisterBlock, 0x500c_7000>;
impl core::fmt::Debug for I2S1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2S1").finish()
    }
}
#[doc = "I2S (Inter-IC Sound) Controller 1"]
pub use self::i2s0 as i2s1;
#[doc = "I2S (Inter-IC Sound) Controller 2"]
pub type I2S2 = crate::Periph<i2s0::RegisterBlock, 0x500c_8000>;
impl core::fmt::Debug for I2S2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2S2").finish()
    }
}
#[doc = "I2S (Inter-IC Sound) Controller 2"]
pub use self::i2s0 as i2s2;
#[doc = "I3C Controller (Master)"]
pub type I3C_MST = crate::Periph<i3c_mst::RegisterBlock, 0x500d_a000>;
impl core::fmt::Debug for I3C_MST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C_MST").finish()
    }
}
#[doc = "I3C Controller (Master)"]
pub mod i3c_mst;
#[doc = "I3C_MST_MEM Peripheral"]
pub type I3C_MST_MEM = crate::Periph<i3c_mst_mem::RegisterBlock, 0x500d_a000>;
impl core::fmt::Debug for I3C_MST_MEM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C_MST_MEM").finish()
    }
}
#[doc = "I3C_MST_MEM Peripheral"]
pub mod i3c_mst_mem;
#[doc = "I3C Controller (Slave)"]
pub type I3C_SLV = crate::Periph<i3c_slv::RegisterBlock, 0x500d_b000>;
impl core::fmt::Debug for I3C_SLV {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C_SLV").finish()
    }
}
#[doc = "I3C Controller (Slave)"]
pub mod i3c_slv;
#[doc = "AXI_ICM Peripheral"]
pub type AXI_ICM = crate::Periph<axi_icm::RegisterBlock, 0x500a_4000>;
impl core::fmt::Debug for AXI_ICM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AXI_ICM").finish()
    }
}
#[doc = "AXI_ICM Peripheral"]
pub mod axi_icm;
#[doc = "Input/Output Multiplexer"]
pub type IO_MUX = crate::Periph<io_mux::RegisterBlock, 0x500e_1000>;
impl core::fmt::Debug for IO_MUX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IO_MUX").finish()
    }
}
#[doc = "Input/Output Multiplexer"]
pub mod io_mux;
#[doc = "ISP Peripheral"]
pub type ISP = crate::Periph<isp::RegisterBlock, 0x500a_1000>;
impl core::fmt::Debug for ISP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ISP").finish()
    }
}
#[doc = "ISP Peripheral"]
pub mod isp;
#[doc = "JPEG Codec"]
pub type JPEG = crate::Periph<jpeg::RegisterBlock, 0x5008_6000>;
impl core::fmt::Debug for JPEG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("JPEG").finish()
    }
}
#[doc = "JPEG Codec"]
pub mod jpeg;
#[doc = "Camera/LCD Controller"]
pub type LCD_CAM = crate::Periph<lcd_cam::RegisterBlock, 0x500d_c000>;
impl core::fmt::Debug for LCD_CAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LCD_CAM").finish()
    }
}
#[doc = "Camera/LCD Controller"]
pub mod lcd_cam;
#[doc = "LED Control PWM (Pulse Width Modulation)"]
pub type LEDC = crate::Periph<ledc::RegisterBlock, 0x500d_3000>;
impl core::fmt::Debug for LEDC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LEDC").finish()
    }
}
#[doc = "LED Control PWM (Pulse Width Modulation)"]
pub mod ledc;
#[doc = "Low-power Interrupt Controller"]
pub type LP_INTR = crate::Periph<lp_intr::RegisterBlock, 0x5012_c000>;
impl core::fmt::Debug for LP_INTR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_INTR").finish()
    }
}
#[doc = "Low-power Interrupt Controller"]
pub mod lp_intr;
#[doc = "LP_PERI Peripheral"]
pub type LP_PERI = crate::Periph<lp_peri::RegisterBlock, 0x5012_0000>;
impl core::fmt::Debug for LP_PERI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_PERI").finish()
    }
}
#[doc = "LP_PERI Peripheral"]
pub mod lp_peri;
#[doc = "LP_SYS Peripheral"]
pub type LP_SYS = crate::Periph<lp_sys::RegisterBlock, 0x5011_0000>;
impl core::fmt::Debug for LP_SYS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_SYS").finish()
    }
}
#[doc = "LP_SYS Peripheral"]
pub mod lp_sys;
#[doc = "LP_ANA_PERI Peripheral"]
pub type LP_ANA = crate::Periph<lp_ana::RegisterBlock, 0x5011_3000>;
impl core::fmt::Debug for LP_ANA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_ANA").finish()
    }
}
#[doc = "LP_ANA_PERI Peripheral"]
pub mod lp_ana;
#[doc = "LP_AON_CLKRST Peripheral"]
pub type LP_AON_CLKRST = crate::Periph<lp_aon_clkrst::RegisterBlock, 0x5011_1000>;
impl core::fmt::Debug for LP_AON_CLKRST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_AON_CLKRST").finish()
    }
}
#[doc = "LP_AON_CLKRST Peripheral"]
pub mod lp_aon_clkrst;
#[doc = "Low-power General Purpose Input/Output"]
pub type LP_GPIO = crate::Periph<lp_gpio::RegisterBlock, 0x5012_a000>;
impl core::fmt::Debug for LP_GPIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_GPIO").finish()
    }
}
#[doc = "Low-power General Purpose Input/Output"]
pub mod lp_gpio;
#[doc = "Low-power I2C (Inter-Integrated Circuit) Controller 0"]
pub type LP_I2C0 = crate::Periph<lp_i2c0::RegisterBlock, 0x5012_2000>;
impl core::fmt::Debug for LP_I2C0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_I2C0").finish()
    }
}
#[doc = "Low-power I2C (Inter-Integrated Circuit) Controller 0"]
pub mod lp_i2c0;
#[doc = "Low-power I2S (Inter-IC Sound) Controller 0"]
pub type LP_I2S0 = crate::Periph<lp_i2s0::RegisterBlock, 0x5012_5000>;
impl core::fmt::Debug for LP_I2S0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_I2S0").finish()
    }
}
#[doc = "Low-power I2S (Inter-IC Sound) Controller 0"]
pub mod lp_i2s0;
#[doc = "Low-power Input/Output Multiplexer"]
pub type LP_IO_MUX = crate::Periph<lp_io_mux::RegisterBlock, 0x5012_b000>;
impl core::fmt::Debug for LP_IO_MUX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_IO_MUX").finish()
    }
}
#[doc = "Low-power Input/Output Multiplexer"]
pub mod lp_io_mux;
#[doc = "Low-power UART (Universal Asynchronous Receiver-Transmitter) Controller"]
pub type LP_UART = crate::Periph<lp_uart::RegisterBlock, 0x5012_1000>;
impl core::fmt::Debug for LP_UART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_UART").finish()
    }
}
#[doc = "Low-power UART (Universal Asynchronous Receiver-Transmitter) Controller"]
pub mod lp_uart;
#[doc = "Motor Control Pulse-Width Modulation 0"]
pub type MCPWM0 = crate::Periph<mcpwm0::RegisterBlock, 0x500c_0000>;
impl core::fmt::Debug for MCPWM0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCPWM0").finish()
    }
}
#[doc = "Motor Control Pulse-Width Modulation 0"]
pub mod mcpwm0;
#[doc = "Motor Control Pulse-Width Modulation 1"]
pub type MCPWM1 = crate::Periph<mcpwm0::RegisterBlock, 0x500c_1000>;
impl core::fmt::Debug for MCPWM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCPWM1").finish()
    }
}
#[doc = "Motor Control Pulse-Width Modulation 1"]
pub use self::mcpwm0 as mcpwm1;
#[doc = "Parallel IO Controller"]
pub type PARL_IO = crate::Periph<parl_io::RegisterBlock, 0x500c_f000>;
impl core::fmt::Debug for PARL_IO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PARL_IO").finish()
    }
}
#[doc = "Parallel IO Controller"]
pub mod parl_io;
#[doc = "PAU Peripheral"]
pub type PAU = crate::Periph<pau::RegisterBlock, 0x6009_3000>;
impl core::fmt::Debug for PAU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PAU").finish()
    }
}
#[doc = "PAU Peripheral"]
pub mod pau;
#[doc = "Pulse Count Controller"]
pub type PCNT = crate::Periph<pcnt::RegisterBlock, 0x500c_9000>;
impl core::fmt::Debug for PCNT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PCNT").finish()
    }
}
#[doc = "Pulse Count Controller"]
pub mod pcnt;
#[doc = "PMU Peripheral"]
pub type PMU = crate::Periph<pmu::RegisterBlock, 0x5011_5000>;
impl core::fmt::Debug for PMU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PMU").finish()
    }
}
#[doc = "PMU Peripheral"]
pub mod pmu;
#[doc = "PPA Peripheral"]
pub type PPA = crate::Periph<ppa::RegisterBlock, 0x5008_7000>;
impl core::fmt::Debug for PPA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PPA").finish()
    }
}
#[doc = "PPA Peripheral"]
pub mod ppa;
#[doc = "PVT Peripheral"]
pub type PVT = crate::Periph<pvt::RegisterBlock, 0x5009_e000>;
impl core::fmt::Debug for PVT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PVT").finish()
    }
}
#[doc = "PVT Peripheral"]
pub mod pvt;
#[doc = "Remote Control"]
pub type RMT = crate::Periph<rmt::RegisterBlock, 0x500d_4000>;
impl core::fmt::Debug for RMT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RMT").finish()
    }
}
#[doc = "Remote Control"]
pub mod rmt;
#[doc = "RSA (Rivest Shamir Adleman) Accelerator"]
pub type RSA = crate::Periph<rsa::RegisterBlock, 0x5009_2000>;
impl core::fmt::Debug for RSA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RSA").finish()
    }
}
#[doc = "RSA (Rivest Shamir Adleman) Accelerator"]
pub mod rsa;
#[doc = "Low-power Analog to Digital Converter"]
pub type LP_ADC = crate::Periph<lp_adc::RegisterBlock, 0x5012_7000>;
impl core::fmt::Debug for LP_ADC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_ADC").finish()
    }
}
#[doc = "Low-power Analog to Digital Converter"]
pub mod lp_adc;
#[doc = "Low-power Timer"]
pub type LP_TIMER = crate::Periph<lp_timer::RegisterBlock, 0x5011_2000>;
impl core::fmt::Debug for LP_TIMER {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_TIMER").finish()
    }
}
#[doc = "Low-power Timer"]
pub mod lp_timer;
#[doc = "LP_TOUCH Peripheral"]
pub type LP_TOUCH = crate::Periph<lp_touch::RegisterBlock, 0x5012_8000>;
impl core::fmt::Debug for LP_TOUCH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_TOUCH").finish()
    }
}
#[doc = "LP_TOUCH Peripheral"]
pub mod lp_touch;
#[doc = "Low-power Watchdog Timer"]
pub type LP_WDT = crate::Periph<lp_wdt::RegisterBlock, 0x5011_6000>;
impl core::fmt::Debug for LP_WDT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_WDT").finish()
    }
}
#[doc = "Low-power Watchdog Timer"]
pub mod lp_wdt;
#[doc = "SD/MMC Host Controller"]
pub type SDHOST = crate::Periph<sdhost::RegisterBlock, 0x5008_3000>;
impl core::fmt::Debug for SDHOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDHOST").finish()
    }
}
#[doc = "SD/MMC Host Controller"]
pub mod sdhost;
#[doc = "SHA (Secure Hash Algorithm) Accelerator"]
pub type SHA = crate::Periph<sha::RegisterBlock, 0x5009_1000>;
impl core::fmt::Debug for SHA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SHA").finish()
    }
}
#[doc = "SHA (Secure Hash Algorithm) Accelerator"]
pub mod sha;
#[doc = "Event Task Matrix"]
pub type SOC_ETM = crate::Periph<soc_etm::RegisterBlock, 0x500d_5000>;
impl core::fmt::Debug for SOC_ETM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SOC_ETM").finish()
    }
}
#[doc = "Event Task Matrix"]
pub mod soc_etm;
#[doc = "SPI (Serial Peripheral Interface) Controller 0"]
pub type SPI0 = crate::Periph<spi0::RegisterBlock, 0x5008_c000>;
impl core::fmt::Debug for SPI0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI0").finish()
    }
}
#[doc = "SPI (Serial Peripheral Interface) Controller 0"]
pub mod spi0;
#[doc = "SPI (Serial Peripheral Interface) Controller 1"]
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x5008_d000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
#[doc = "SPI (Serial Peripheral Interface) Controller 1"]
pub mod spi1;
#[doc = "SPI (Serial Peripheral Interface) Controller 2"]
pub type SPI2 = crate::Periph<spi2::RegisterBlock, 0x500d_0000>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
#[doc = "SPI (Serial Peripheral Interface) Controller 2"]
pub mod spi2;
#[doc = "SPI (Serial Peripheral Interface) Controller 3"]
pub type SPI3 = crate::Periph<spi3::RegisterBlock, 0x500d_1000>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
#[doc = "SPI (Serial Peripheral Interface) Controller 3"]
pub mod spi3;
#[doc = "System Timer"]
pub type SYSTIMER = crate::Periph<systimer::RegisterBlock, 0x500e_2000>;
impl core::fmt::Debug for SYSTIMER {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSTIMER").finish()
    }
}
#[doc = "System Timer"]
pub mod systimer;
#[doc = "Timer Group 0"]
pub type TIMG0 = crate::Periph<timg0::RegisterBlock, 0x500c_2000>;
impl core::fmt::Debug for TIMG0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMG0").finish()
    }
}
#[doc = "Timer Group 0"]
pub mod timg0;
#[doc = "Timer Group 1"]
pub type TIMG1 = crate::Periph<timg0::RegisterBlock, 0x500c_3000>;
impl core::fmt::Debug for TIMG1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMG1").finish()
    }
}
#[doc = "Timer Group 1"]
pub use self::timg0 as timg1;
#[doc = "TRACE0 Peripheral"]
pub type TRACE0 = crate::Periph<trace0::RegisterBlock, 0x3ff0_4000>;
impl core::fmt::Debug for TRACE0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TRACE0").finish()
    }
}
#[doc = "TRACE0 Peripheral"]
pub mod trace0;
#[doc = "TRACE1 Peripheral"]
pub type TRACE1 = crate::Periph<trace0::RegisterBlock, 0x3ff0_5000>;
impl core::fmt::Debug for TRACE1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TRACE1").finish()
    }
}
#[doc = "TRACE1 Peripheral"]
pub use self::trace0 as trace1;
#[doc = "Low-power Temperature Sensor"]
pub type LP_TSENS = crate::Periph<lp_tsens::RegisterBlock, 0x5012_f000>;
impl core::fmt::Debug for LP_TSENS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LP_TSENS").finish()
    }
}
#[doc = "Low-power Temperature Sensor"]
pub mod lp_tsens;
#[doc = "Two-Wire Automotive Interface"]
pub type TWAI0 = crate::Periph<twai0::RegisterBlock, 0x500d_7000>;
impl core::fmt::Debug for TWAI0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TWAI0").finish()
    }
}
#[doc = "Two-Wire Automotive Interface"]
pub mod twai0;
#[doc = "Two-Wire Automotive Interface"]
pub type TWAI1 = crate::Periph<twai0::RegisterBlock, 0x500d_8000>;
impl core::fmt::Debug for TWAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TWAI1").finish()
    }
}
#[doc = "Two-Wire Automotive Interface"]
pub use self::twai0 as twai1;
#[doc = "Two-Wire Automotive Interface"]
pub type TWAI2 = crate::Periph<twai0::RegisterBlock, 0x500d_9000>;
impl core::fmt::Debug for TWAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TWAI2").finish()
    }
}
#[doc = "Two-Wire Automotive Interface"]
pub use self::twai0 as twai2;
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 0"]
pub type UART0 = crate::Periph<uart0::RegisterBlock, 0x500c_a000>;
impl core::fmt::Debug for UART0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART0").finish()
    }
}
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 0"]
pub mod uart0;
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 1"]
pub type UART1 = crate::Periph<uart0::RegisterBlock, 0x500c_b000>;
impl core::fmt::Debug for UART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART1").finish()
    }
}
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 1"]
pub use self::uart0 as uart1;
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 2"]
pub type UART2 = crate::Periph<uart0::RegisterBlock, 0x500c_c000>;
impl core::fmt::Debug for UART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART2").finish()
    }
}
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 2"]
pub use self::uart0 as uart2;
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 3"]
pub type UART3 = crate::Periph<uart0::RegisterBlock, 0x500c_d000>;
impl core::fmt::Debug for UART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART3").finish()
    }
}
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 3"]
pub use self::uart0 as uart3;
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 4"]
pub type UART4 = crate::Periph<uart0::RegisterBlock, 0x500c_e000>;
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
#[doc = "UART (Universal Asynchronous Receiver-Transmitter) Controller 4"]
pub use self::uart0 as uart4;
#[doc = "Universal Host Controller Interface 0"]
pub type UHCI0 = crate::Periph<uhci0::RegisterBlock, 0x500d_f000>;
impl core::fmt::Debug for UHCI0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UHCI0").finish()
    }
}
#[doc = "Universal Host Controller Interface 0"]
pub mod uhci0;
#[doc = "Full-speed USB Serial/JTAG Controller"]
pub type USB_DEVICE = crate::Periph<usb_device::RegisterBlock, 0x500d_2000>;
impl core::fmt::Debug for USB_DEVICE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_DEVICE").finish()
    }
}
#[doc = "Full-speed USB Serial/JTAG Controller"]
pub mod usb_device;
#[doc = "USB_WRAP Peripheral"]
pub type USB_WRAP = crate::Periph<usb_wrap::RegisterBlock, 0x5008_0000>;
impl core::fmt::Debug for USB_WRAP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_WRAP").finish()
    }
}
#[doc = "USB_WRAP Peripheral"]
pub mod usb_wrap;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "CLIC"]
    pub CLIC: CLIC,
    #[doc = "ADC"]
    pub ADC: ADC,
    #[doc = "AES"]
    pub AES: AES,
    #[doc = "AHB_DMA"]
    pub AHB_DMA: AHB_DMA,
    #[doc = "LP_I2C_ANA_MST"]
    pub LP_I2C_ANA_MST: LP_I2C_ANA_MST,
    #[doc = "ASSIST_DEBUG"]
    pub ASSIST_DEBUG: ASSIST_DEBUG,
    #[doc = "AXI_DMA"]
    pub AXI_DMA: AXI_DMA,
    #[doc = "BITSCRAMBLER"]
    pub BITSCRAMBLER: BITSCRAMBLER,
    #[doc = "CACHE"]
    pub CACHE: CACHE,
    #[doc = "INTERRUPT_CORE0"]
    pub INTERRUPT_CORE0: INTERRUPT_CORE0,
    #[doc = "INTERRUPT_CORE1"]
    pub INTERRUPT_CORE1: INTERRUPT_CORE1,
    #[doc = "MIPI_CSI_BRIDGE"]
    pub MIPI_CSI_BRIDGE: MIPI_CSI_BRIDGE,
    #[doc = "MIPI_CSI_HOST"]
    pub MIPI_CSI_HOST: MIPI_CSI_HOST,
    #[doc = "DMA"]
    pub DMA: DMA,
    #[doc = "DS"]
    pub DS: DS,
    #[doc = "MIPI_DSI_BRIDGE"]
    pub MIPI_DSI_BRIDGE: MIPI_DSI_BRIDGE,
    #[doc = "MIPI_DSI_HOST"]
    pub MIPI_DSI_HOST: MIPI_DSI_HOST,
    #[doc = "ECC"]
    pub ECC: ECC,
    #[doc = "ECDSA"]
    pub ECDSA: ECDSA,
    #[doc = "EFUSE"]
    pub EFUSE: EFUSE,
    #[doc = "GPIO"]
    pub GPIO: GPIO,
    #[doc = "GPIO_SD"]
    pub GPIO_SD: GPIO_SD,
    #[doc = "H264"]
    pub H264: H264,
    #[doc = "H264_DMA"]
    pub H264_DMA: H264_DMA,
    #[doc = "HMAC"]
    pub HMAC: HMAC,
    #[doc = "HP_SYS"]
    pub HP_SYS: HP_SYS,
    #[doc = "HP_SYS_CLKRST"]
    pub HP_SYS_CLKRST: HP_SYS_CLKRST,
    #[doc = "LP_HUK"]
    pub LP_HUK: LP_HUK,
    #[doc = "I2C0"]
    pub I2C0: I2C0,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "I2S0"]
    pub I2S0: I2S0,
    #[doc = "I2S1"]
    pub I2S1: I2S1,
    #[doc = "I2S2"]
    pub I2S2: I2S2,
    #[doc = "I3C_MST"]
    pub I3C_MST: I3C_MST,
    #[doc = "I3C_MST_MEM"]
    pub I3C_MST_MEM: I3C_MST_MEM,
    #[doc = "I3C_SLV"]
    pub I3C_SLV: I3C_SLV,
    #[doc = "AXI_ICM"]
    pub AXI_ICM: AXI_ICM,
    #[doc = "IO_MUX"]
    pub IO_MUX: IO_MUX,
    #[doc = "ISP"]
    pub ISP: ISP,
    #[doc = "JPEG"]
    pub JPEG: JPEG,
    #[doc = "LCD_CAM"]
    pub LCD_CAM: LCD_CAM,
    #[doc = "LEDC"]
    pub LEDC: LEDC,
    #[doc = "LP_INTR"]
    pub LP_INTR: LP_INTR,
    #[doc = "LP_PERI"]
    pub LP_PERI: LP_PERI,
    #[doc = "LP_SYS"]
    pub LP_SYS: LP_SYS,
    #[doc = "LP_ANA"]
    pub LP_ANA: LP_ANA,
    #[doc = "LP_AON_CLKRST"]
    pub LP_AON_CLKRST: LP_AON_CLKRST,
    #[doc = "LP_GPIO"]
    pub LP_GPIO: LP_GPIO,
    #[doc = "LP_I2C0"]
    pub LP_I2C0: LP_I2C0,
    #[doc = "LP_I2S0"]
    pub LP_I2S0: LP_I2S0,
    #[doc = "LP_IO_MUX"]
    pub LP_IO_MUX: LP_IO_MUX,
    #[doc = "LP_UART"]
    pub LP_UART: LP_UART,
    #[doc = "MCPWM0"]
    pub MCPWM0: MCPWM0,
    #[doc = "MCPWM1"]
    pub MCPWM1: MCPWM1,
    #[doc = "PARL_IO"]
    pub PARL_IO: PARL_IO,
    #[doc = "PAU"]
    pub PAU: PAU,
    #[doc = "PCNT"]
    pub PCNT: PCNT,
    #[doc = "PMU"]
    pub PMU: PMU,
    #[doc = "PPA"]
    pub PPA: PPA,
    #[doc = "PVT"]
    pub PVT: PVT,
    #[doc = "RMT"]
    pub RMT: RMT,
    #[doc = "RSA"]
    pub RSA: RSA,
    #[doc = "LP_ADC"]
    pub LP_ADC: LP_ADC,
    #[doc = "LP_TIMER"]
    pub LP_TIMER: LP_TIMER,
    #[doc = "LP_TOUCH"]
    pub LP_TOUCH: LP_TOUCH,
    #[doc = "LP_WDT"]
    pub LP_WDT: LP_WDT,
    #[doc = "SDHOST"]
    pub SDHOST: SDHOST,
    #[doc = "SHA"]
    pub SHA: SHA,
    #[doc = "SOC_ETM"]
    pub SOC_ETM: SOC_ETM,
    #[doc = "SPI0"]
    pub SPI0: SPI0,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "SPI3"]
    pub SPI3: SPI3,
    #[doc = "SYSTIMER"]
    pub SYSTIMER: SYSTIMER,
    #[doc = "TIMG0"]
    pub TIMG0: TIMG0,
    #[doc = "TIMG1"]
    pub TIMG1: TIMG1,
    #[doc = "TRACE0"]
    pub TRACE0: TRACE0,
    #[doc = "TRACE1"]
    pub TRACE1: TRACE1,
    #[doc = "LP_TSENS"]
    pub LP_TSENS: LP_TSENS,
    #[doc = "TWAI0"]
    pub TWAI0: TWAI0,
    #[doc = "TWAI1"]
    pub TWAI1: TWAI1,
    #[doc = "TWAI2"]
    pub TWAI2: TWAI2,
    #[doc = "UART0"]
    pub UART0: UART0,
    #[doc = "UART1"]
    pub UART1: UART1,
    #[doc = "UART2"]
    pub UART2: UART2,
    #[doc = "UART3"]
    pub UART3: UART3,
    #[doc = "UART4"]
    pub UART4: UART4,
    #[doc = "UHCI0"]
    pub UHCI0: UHCI0,
    #[doc = "USB_DEVICE"]
    pub USB_DEVICE: USB_DEVICE,
    #[doc = "USB_WRAP"]
    pub USB_WRAP: USB_WRAP,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            CLIC: CLIC::steal(),
            ADC: ADC::steal(),
            AES: AES::steal(),
            AHB_DMA: AHB_DMA::steal(),
            LP_I2C_ANA_MST: LP_I2C_ANA_MST::steal(),
            ASSIST_DEBUG: ASSIST_DEBUG::steal(),
            AXI_DMA: AXI_DMA::steal(),
            BITSCRAMBLER: BITSCRAMBLER::steal(),
            CACHE: CACHE::steal(),
            INTERRUPT_CORE0: INTERRUPT_CORE0::steal(),
            INTERRUPT_CORE1: INTERRUPT_CORE1::steal(),
            MIPI_CSI_BRIDGE: MIPI_CSI_BRIDGE::steal(),
            MIPI_CSI_HOST: MIPI_CSI_HOST::steal(),
            DMA: DMA::steal(),
            DS: DS::steal(),
            MIPI_DSI_BRIDGE: MIPI_DSI_BRIDGE::steal(),
            MIPI_DSI_HOST: MIPI_DSI_HOST::steal(),
            ECC: ECC::steal(),
            ECDSA: ECDSA::steal(),
            EFUSE: EFUSE::steal(),
            GPIO: GPIO::steal(),
            GPIO_SD: GPIO_SD::steal(),
            H264: H264::steal(),
            H264_DMA: H264_DMA::steal(),
            HMAC: HMAC::steal(),
            HP_SYS: HP_SYS::steal(),
            HP_SYS_CLKRST: HP_SYS_CLKRST::steal(),
            LP_HUK: LP_HUK::steal(),
            I2C0: I2C0::steal(),
            I2C1: I2C1::steal(),
            I2S0: I2S0::steal(),
            I2S1: I2S1::steal(),
            I2S2: I2S2::steal(),
            I3C_MST: I3C_MST::steal(),
            I3C_MST_MEM: I3C_MST_MEM::steal(),
            I3C_SLV: I3C_SLV::steal(),
            AXI_ICM: AXI_ICM::steal(),
            IO_MUX: IO_MUX::steal(),
            ISP: ISP::steal(),
            JPEG: JPEG::steal(),
            LCD_CAM: LCD_CAM::steal(),
            LEDC: LEDC::steal(),
            LP_INTR: LP_INTR::steal(),
            LP_PERI: LP_PERI::steal(),
            LP_SYS: LP_SYS::steal(),
            LP_ANA: LP_ANA::steal(),
            LP_AON_CLKRST: LP_AON_CLKRST::steal(),
            LP_GPIO: LP_GPIO::steal(),
            LP_I2C0: LP_I2C0::steal(),
            LP_I2S0: LP_I2S0::steal(),
            LP_IO_MUX: LP_IO_MUX::steal(),
            LP_UART: LP_UART::steal(),
            MCPWM0: MCPWM0::steal(),
            MCPWM1: MCPWM1::steal(),
            PARL_IO: PARL_IO::steal(),
            PAU: PAU::steal(),
            PCNT: PCNT::steal(),
            PMU: PMU::steal(),
            PPA: PPA::steal(),
            PVT: PVT::steal(),
            RMT: RMT::steal(),
            RSA: RSA::steal(),
            LP_ADC: LP_ADC::steal(),
            LP_TIMER: LP_TIMER::steal(),
            LP_TOUCH: LP_TOUCH::steal(),
            LP_WDT: LP_WDT::steal(),
            SDHOST: SDHOST::steal(),
            SHA: SHA::steal(),
            SOC_ETM: SOC_ETM::steal(),
            SPI0: SPI0::steal(),
            SPI1: SPI1::steal(),
            SPI2: SPI2::steal(),
            SPI3: SPI3::steal(),
            SYSTIMER: SYSTIMER::steal(),
            TIMG0: TIMG0::steal(),
            TIMG1: TIMG1::steal(),
            TRACE0: TRACE0::steal(),
            TRACE1: TRACE1::steal(),
            LP_TSENS: LP_TSENS::steal(),
            TWAI0: TWAI0::steal(),
            TWAI1: TWAI1::steal(),
            TWAI2: TWAI2::steal(),
            UART0: UART0::steal(),
            UART1: UART1::steal(),
            UART2: UART2::steal(),
            UART3: UART3::steal(),
            UART4: UART4::steal(),
            UHCI0: UHCI0::steal(),
            USB_DEVICE: USB_DEVICE::steal(),
            USB_WRAP: USB_WRAP::steal(),
        }
    }
}
